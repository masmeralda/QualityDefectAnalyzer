import os
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2, binom, norm
import tkinter as tk
from tkinter import filedialog
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
import tempfile
import base64
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –±—Ä–∞–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ", page_icon="üìä", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
try:
    # DejaVu Sans ‚Äî –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    font_path_regular = os.path.join("fonts", "DejaVuSans.ttf")
    font_path_bold = os.path.join("fonts", "DejaVuSans-Bold.ttf")
    
    pdfmetrics.registerFont(TTFont('DejaVuSans', font_path_regular))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', font_path_bold))
    
    FONT_NAME = 'DejaVuSans'
    FONT_BOLD = 'DejaVuSans-Bold'
except Exception as e:
    FONT_NAME = 'Helvetica'
    FONT_BOLD = 'Helvetica-Bold'
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã. –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ PDF –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û—à–∏–±–∫–∞: {e}")

def get_save_path(default_name="defect_data.csv"):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    root = tk.Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    file_path = filedialog.asksaveasfilename(
        defaultextension=".csv",
        filetypes=[("CSV Files", "*.csv")],
        initialfile=default_name,
        title="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"
    )
    root.destroy()
    return file_path

def clear_data():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
    if 'uploaded_file' in st.session_state:
        st.session_state.uploaded_file.close()
        del st.session_state.uploaded_file
    st.session_state.pop('data', None)
    st.session_state.pop('editable_df', None)
    st.session_state.pop('csv_loaded', None)
    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")

def create_pdf_report():
    """–°–æ–∑–¥–∞–µ—Ç PDF –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    if "data" not in st.session_state:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
        pdf_path = tmpfile.name
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç PDF
    doc = SimpleDocTemplate(
        pdf_path,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=72
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    styles = getSampleStyleSheet()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    styles.add(ParagraphStyle(name='RussianTitle', 
                            fontName=FONT_BOLD,
                            fontSize=18,
                            alignment=1,
                            spaceAfter=12))
    
    styles.add(ParagraphStyle(name='RussianHeading2', 
                            fontName=FONT_BOLD,
                            fontSize=14,
                            spaceBefore=12,
                            spaceAfter=6))
    
    styles.add(ParagraphStyle(name='RussianNormal', 
                            fontName=FONT_NAME,
                            fontSize=10,
                            leading=12))
    
    story = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    story.append(Paragraph("–ê–Ω–∞–ª–∏–∑ –±—Ä–∞–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ", styles['RussianTitle']))
    story.append(Spacer(1, 12))
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    batch_sizes = st.session_state.data["batch_sizes"]
    defect_counts = st.session_state.data["defect_counts"]
    total_batches = len(batch_sizes)
    total_parts = sum(batch_sizes)
    total_defects = sum(defect_counts)
    avg_defect_rate = total_defects / total_parts if total_parts > 0 else 0
    
    info_text = f"""
    <b>–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π:</b> {total_batches}<br/>
    <b>–í—Å–µ–≥–æ –¥–µ—Ç–∞–ª–µ–π:</b> {total_parts:,}<br/>
    <b>–°—Ä–µ–¥–Ω–∏–π % –±—Ä–∞–∫–∞:</b> {avg_defect_rate * 100:.2f}%<br/>
    """
    story.append(Paragraph(info_text, styles['RussianNormal']))
    story.append(Spacer(1, 12))
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.DataFrame({
        "–ü–∞—Ä—Ç–∏—è": range(1, total_batches + 1),
        "–î–µ—Ç–∞–ª–µ–π": batch_sizes,
        "–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö": defect_counts,
        "% –±—Ä–∞–∫–∞": [d / s * 100 for d, s in zip(defect_counts, batch_sizes)]
    })
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è ReportLab
    table_data = [df.columns.tolist()] + df.values.tolist()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    t = Table(table_data)
    t.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), FONT_BOLD),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))
    story.append(t)
    story.append(Spacer(1, 24))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ PDF
    def add_plot_to_story(fig, title):
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = tempfile.gettempdir()
        temp_file = os.path.join(temp_dir, f"temp_plot_{next(tempfile._get_candidate_names())}.png")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig.savefig(temp_file, bbox_inches='tight', dpi=300)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        story.append(Paragraph(title, styles['RussianHeading2']))
        story.append(Spacer(1, 12))
        story.append(Image(temp_file, width=400, height=250))
        story.append(Spacer(1, 24))
        # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ—á–∏—Å—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–∞–∫–∞
    fig1, ax1 = plt.subplots(figsize=(10, 5))
    expected_defects = [s * avg_defect_rate for s in batch_sizes]
    ax1.bar(range(1, total_batches + 1), defect_counts, 
           color=["#ef4444" if d > e else "#10b981" for d, e in zip(defect_counts, expected_defects)],
           alpha=0.8, label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–∞–∫")
    ax1.plot(range(1, total_batches + 1), expected_defects, "o--", color="#4f46e5", label="–û–∂–∏–¥–∞–µ–º—ã–π (–±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ)")
    ax1.set_xlabel("–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏")
    ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π")
    ax1.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–∞–∫–∞")
    ax1.legend()
    ax1.grid(True, linestyle='--', alpha=0.5)
    add_plot_to_story(fig1, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–∞–∫–∞")
    plt.close(fig1)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∏ –±—Ä–∞–∫–∞
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    defect_rates = np.array(defect_counts) / np.array(batch_sizes)
    ax2.hist(defect_rates, bins=15, density=True, alpha=0.6, color='#3b82f6', label='–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    
    mu = avg_defect_rate
    sigma = np.sqrt(mu*(1-mu)/np.mean(batch_sizes))
    x = np.linspace(max(0, mu-3*sigma), min(1, mu+3*sigma), 100)
    ax2.plot(x, norm.pdf(x, mu, sigma), 'r-', lw=2, label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ')
    
    ax2.set_xlabel('–î–æ–ª—è –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π')
    ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
    ax2.legend()
    ax2.grid(True)
    add_plot_to_story(fig2, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∏ –±—Ä–∞–∫–∞")
    plt.close(fig2)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç
    observed = np.array(defect_counts)
    expected = np.array(batch_sizes) * avg_defect_rate
    chi2_stat = ((observed - expected)**2 / expected).sum()
    df = len(observed) - 2
    p_value = 1 - chi2.cdf(chi2_stat, df)
    
    test_result = f"""
    <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç:</b><br/>
    <b>œá¬≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {chi2_stat:.3f}<br/>
    <b>–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã:</b> {df}<br/>
    <b>p-–∑–Ω–∞—á–µ–Ω–∏–µ:</b> {p_value:.4f}<br/><br/>
    """
    
    if p_value < 0.05:
        test_result += "<b>–í—ã–≤–æ–¥:</b> –ì–∏–ø–æ—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è (p < 0.05) - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É."
    else:
        test_result += "<b>–í—ã–≤–æ–¥:</b> –ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É."
    
    story.append(Paragraph(test_result, styles['RussianNormal']))
    story.append(Spacer(1, 24))
    
    # –°–æ–±–∏—Ä–∞–µ–º PDF
    doc.build(story)
    
    # –ß–∏—Ç–∞–µ–º PDF –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    with open(pdf_path, "rb") as f:
        pdf_bytes = f.read()
    
    # –ö–æ–¥–∏—Ä—É–µ–º PDF –≤ base64 –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Streamlit
    b64 = base64.b64encode(pdf_bytes).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="defect_analysis_report.pdf">–°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç</a>'
    st.markdown(href, unsafe_allow_html=True)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª PDF
    os.unlink(pdf_path)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.header("‚öôÔ∏è –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    input_method = st.radio("–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["–°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", "–û—Ç–∫—Ä—ã—Ç—å CSV"])

    if input_method == "–û—Ç–∫—Ä—ã—Ç—å CSV":
        uploaded_file = st.file_uploader("CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'batch_size' –∏ 'defect_count'", key="file_uploader")
        if uploaded_file:
            st.session_state.uploaded_file = uploaded_file
            try:
                df = pd.read_csv(uploaded_file)
                if "batch_size" in df.columns and "defect_count" in df.columns:
                    st.session_state.editable_df = pd.DataFrame({
                        '–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏': df["batch_size"],
                        '–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏': df["defect_count"]
                    })
                    st.session_state.csv_loaded = True
                    st.success("CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                else:
                    st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'batch_size' –∏ 'defect_count'")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")
    
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", on_click=clear_data):
        pass

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if input_method == "–°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é":
    st.header("üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π")
    
    if 'editable_df' not in st.session_state:
        st.session_state.editable_df = pd.DataFrame(columns=['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏', '–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏'])
        st.session_state.editable_df.loc[0] = [100, 5]
    
    def add_row():
        st.session_state.editable_df.loc[len(st.session_state.editable_df)] = [100, 5]
    
    def delete_row():
        if len(st.session_state.editable_df) > 1:
            st.session_state.editable_df = st.session_state.editable_df.iloc[:-1]
    
    edited_df = st.data_editor(
        st.session_state.editable_df,
        num_rows="dynamic",
        use_container_width=True,
        column_config={
            "–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏": st.column_config.NumberColumn(min_value=1),
            "–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏": st.column_config.NumberColumn(min_value=0)
        }
    )
    
    col1, col2, col3 = st.columns(3)
    col1.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É", on_click=add_row)
    col2.button("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É", on_click=delete_row)
    
    if col3.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
        st.session_state.data = {
            "batch_sizes": edited_df['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏'].tolist(),
            "defect_counts": edited_df['–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏'].tolist()
        }
        st.success("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
    
    if st.button("üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ CSV"):
        try:
            save_path = get_save_path()
            if not save_path:
                st.warning("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            else:
                export_df = pd.DataFrame({
                    'batch_size': edited_df['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏'],
                    'defect_count': edited_df['–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏']
                })
                export_df.to_csv(save_path, index=False, encoding='utf-8-sig')
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ CSV
elif input_method == "–û—Ç–∫—Ä—ã—Ç—å CSV" and st.session_state.get('csv_loaded'):
    st.header("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
    
    edited_df = st.data_editor(
        st.session_state.editable_df,
        num_rows="fixed",
        use_container_width=True,
        column_config={
            "–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏": st.column_config.NumberColumn(min_value=1),
            "–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏": st.column_config.NumberColumn(min_value=0)
        }
    )
    
    col1, col2 = st.columns(2)
    
    if col1.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"):
        st.session_state.data = {
            "batch_sizes": edited_df['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏'].tolist(),
            "defect_counts": edited_df['–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏'].tolist()
        }
        st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
    
    if col2.button("üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫..."):
        try:
            save_path = get_save_path()
            if not save_path:
                st.warning("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            else:
                export_df = pd.DataFrame({
                    'batch_size': edited_df['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏'],
                    'defect_count': edited_df['–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏']
                })
                export_df.to_csv(save_path, index=False, encoding='utf-8-sig')
                st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

# –ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if "data" in st.session_state and st.session_state.data["batch_sizes"]:
    batch_sizes = st.session_state.data["batch_sizes"]
    defect_counts = st.session_state.data["defect_counts"]
    total_batches = len(batch_sizes)
    total_parts = sum(batch_sizes)
    total_defects = sum(defect_counts)
    avg_defect_rate = total_defects / total_parts if total_parts > 0 else 0

    st.header("üìã –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–π")
    df = pd.DataFrame({
        "–ü–∞—Ä—Ç–∏—è": range(1, total_batches + 1),
        "–î–µ—Ç–∞–ª–µ–π": batch_sizes,
        "–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö": defect_counts,
        "% –±—Ä–∞–∫–∞": [d / s * 100 for d, s in zip(defect_counts, batch_sizes)]
    })
    st.dataframe(df.style.format({"% –±—Ä–∞–∫–∞": "{:.2f}"}), use_container_width=True)

    st.header("üìå –°–≤–æ–¥–∫–∞")
    col1, col2, col3 = st.columns(3)
    col1.metric("–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π", total_batches)
    col2.metric("–í—Å–µ–≥–æ –¥–µ—Ç–∞–ª–µ–π", f"{total_parts:,}")
    col3.metric("–°—Ä–µ–¥–Ω–∏–π % –±—Ä–∞–∫–∞", f"{avg_defect_rate * 100:.2f}%")

    st.header("üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    fig1, ax1 = plt.subplots(figsize=(10, 5))
    expected_defects = [s * avg_defect_rate for s in batch_sizes]
    ax1.bar(range(1, total_batches + 1), defect_counts, 
           color=["#ef4444" if d > e else "#10b981" for d, e in zip(defect_counts, expected_defects)],
           alpha=0.8, label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–∞–∫")
    ax1.plot(range(1, total_batches + 1), expected_defects, "o--", color="#4f46e5", label="–û–∂–∏–¥–∞–µ–º—ã–π (–±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ)")
    ax1.set_xlabel("–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏")
    ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π")
    ax1.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–∞–∫–∞")
    ax1.legend()
    ax1.grid(True, linestyle='--', alpha=0.5)
    st.pyplot(fig1)
    plt.close(fig1)

    fig2, ax2 = plt.subplots(figsize=(10, 5))
    defect_rates = np.array(defect_counts) / np.array(batch_sizes)
    ax2.hist(defect_rates, bins=15, density=True, alpha=0.6, color='#3b82f6', label='–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    
    mu = avg_defect_rate
    sigma = np.sqrt(mu*(1-mu)/np.mean(batch_sizes))
    x = np.linspace(max(0, mu-3*sigma), min(1, mu+3*sigma), 100)
    ax2.plot(x, norm.pdf(x, mu, sigma), 'r-', lw=2, label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ')
    
    ax2.set_xlabel('–î–æ–ª—è –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π')
    ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
    ax2.legend()
    ax2.grid(True)
    st.pyplot(fig2)
    plt.close(fig2)

    st.header("üìê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç")
    st.markdown("**–ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞:** –ë—Ä–∞–∫ –≤ –ø–∞—Ä—Ç–∏—è—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.")
    
    if st.button("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã"):
        observed = np.array(defect_counts)
        expected = np.array(batch_sizes) * avg_defect_rate
        
        if np.any(expected < 5):
            st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã < 5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–º–∏!")
        
        chi2_stat = ((observed - expected)**2 / expected).sum()
        df = len(observed) - 2
        p_value = 1 - chi2.cdf(chi2_stat, df)
        
        col1, col2, col3 = st.columns(3)
        col1.metric("œá¬≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{chi2_stat:.3f}")
        col2.metric("–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã", df)
        col3.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{p_value:.4f}")
        
        st.markdown("**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**")
        if p_value < 0.05:
            st.error("–ì–∏–ø–æ—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è (p < 0.05) - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É.")
        else:
            st.success("–ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É.")
        
        with st.expander("‚ÑπÔ∏è –û –º–µ—Ç–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞"):
            st.markdown("""
            **–ú–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:**
            1. –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –≤ –ø–∞—Ä—Ç–∏—è—Ö –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
            2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ–≥–ª–∞—Å–∏—è —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞
            3. –û–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫: n[i] * p, –≥–¥–µ p - –æ–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞
            4. –°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã: k - 2, –≥–¥–µ k - —á–∏—Å–ª–æ –ø–∞—Ä—Ç–∏–π (–º—ã –æ—Ü–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä p –∏–∑ –¥–∞–Ω–Ω—ã—Ö)
            
            **–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏:**
            - –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ‚â• 5
            - –†–∞–∑–º–µ—Ä—ã –ø–∞—Ä—Ç–∏–π –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è
            """)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
    st.header("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    if st.button("üñ®Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"):
        create_pdf_report()
else:
    if input_method == "–°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é":
        st.info("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'")
    elif input_method == "–û—Ç–∫—Ä—ã—Ç—å CSV" and not st.session_state.get('csv_loaded'):
        st.info("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å")