# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑

import numpy as np
from scipy.stats import chi2, norm
import streamlit as st
from scipy.stats import shapiro

def calculate_basic_stats(batch_sizes, defect_counts):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    total_batches = len(batch_sizes)
    total_parts = sum(batch_sizes)
    total_defects = sum(defect_counts)
    avg_defect_rate = total_defects / total_parts if total_parts > 0 else 0
    return total_batches, total_parts, total_defects, avg_defect_rate

def perform_chi2_test_normal(batch_sizes, defect_counts, bins=10):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –±–∏–Ω–æ–≤"""
    defect_rates = np.array(defect_counts) / np.array(batch_sizes)
    n = len(defect_rates)
    
    if n < 30:
        st.warning("‚ö†Ô∏è –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ‚â•30 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (—É –≤–∞—Å {})".format(n))
        stat, p = shapiro(defect_rates)
        st.write(f"Shapiro-Wilk test: p-value = {p:.4f}")
        if p >= 0.05:
            st.success("–î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (Shapiro-Wilk)")
        else:
            st.warning("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ (Shapiro-Wilk)")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫
    
    mu, sigma = np.mean(defect_rates), np.std(defect_rates)
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–Ω—ã –ø–æ –∫–≤–∞–Ω—Ç–∏–ª—è–º
    bin_edges = np.percentile(defect_rates, np.linspace(0, 100, bins+1))
    bin_edges = np.unique(bin_edges)  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    # –†–∞—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç
    observed, _ = np.histogram(defect_rates, bins=bin_edges)
    expected = []
    for i in range(len(bin_edges)-1):
        lower = bin_edges[i]
        upper = bin_edges[i+1]
        prob = norm.cdf(upper, mu, sigma) - norm.cdf(lower, mu, sigma)
        expected.append(prob * n)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–∏–Ω–æ–≤ (–æ–∂–∏–¥–∞–µ–º—ã–µ ‚â•5)
    observed = np.array(observed)
    expected = np.array(expected)
    mask = expected >= 5
    observed = observed[mask]
    expected = expected[mask]
    
    if len(observed) < 3:
        st.warning("""
        üîç –ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º:
        - –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã (—Ä–∞–∑–±—Ä–æ—Å –≤—Å–µ–≥–æ {:.2f}%)
        - –≠—Ç–æ **—Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫** —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞! 
        - **–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è**
                   
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
        1) –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–∞—Ä—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?
        2) –ï—Å—Ç—å –ª–∏ —Ä–µ–¥–∫–∏–µ –≤—ã–±—Ä–æ—Å—ã?
        """.format(100*(defect_rates.max()-defect_rates.min())))
        return None
    
    chi2_stat = np.sum((observed - expected)**2 / expected)
    df = len(observed) - 3
    p_value = 1 - chi2.cdf(chi2_stat, df)
    
    return chi2_stat, df, p_value