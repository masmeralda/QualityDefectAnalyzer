import os
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2, binom, norm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –±—Ä–∞–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ", page_icon="üìä", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π")

def ensure_csv_folder():
    if not os.path.exists("csv-—Ñ–∞–π–ª—ã"):
        os.makedirs("csv-—Ñ–∞–π–ª—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def clear_data():
    st.session_state.pop('data', None)
    st.session_state.pop('editable_df', None)
    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")

with st.sidebar:
    st.header("‚öôÔ∏è –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    input_method = st.radio("–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["–í—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"])

    if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV":
        uploaded_file = st.file_uploader("CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'batch_size' –∏ 'defect_count'")
        if uploaded_file:
            try:
                df = pd.read_csv(uploaded_file)
                if "batch_size" in df.columns and "defect_count" in df.columns:
                    st.session_state.data = {
                        "batch_sizes": df["batch_size"].tolist(),
                        "defect_counts": df["defect_count"].tolist()
                    }
                    st.success("CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                else:
                    st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'batch_size' –∏ 'defect_count'")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", on_click=clear_data):
        pass  # –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ clear_data

if input_method == "–í—Ä—É—á–Ω—É—é":
    st.header("üìù –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π")
    
    if 'editable_df' not in st.session_state:
        st.session_state.editable_df = pd.DataFrame(columns=['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏', '–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏'])
        st.session_state.editable_df.loc[0] = [100, 5]
    
    def add_row():
        st.session_state.editable_df.loc[len(st.session_state.editable_df)] = [100, 5]
    
    def delete_row():
        if len(st.session_state.editable_df) > 1:
            st.session_state.editable_df = st.session_state.editable_df.iloc[:-1]
    
    edited_df = st.data_editor(
        st.session_state.editable_df,
        num_rows="dynamic",
        use_container_width=True,
        column_config={
            "–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏": st.column_config.NumberColumn(min_value=1),
            "–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏": st.column_config.NumberColumn(min_value=0)
        }
    )
    
    col1, col2, col3 = st.columns(3)
    col1.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É", on_click=add_row)
    col2.button("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É", on_click=delete_row)
    
    if col3.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        st.session_state.data = {
            "batch_sizes": edited_df['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏'].tolist(),
            "defect_counts": edited_df['–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏'].tolist()
        }
        st.success("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
    
    if st.button("üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ CSV"):
        ensure_csv_folder()
        csv_path = os.path.join("csv-—Ñ–∞–π–ª—ã", "defect_data.csv")
        
        export_df = pd.DataFrame({
            'batch_size': edited_df['–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏'],
            'defect_count': edited_df['–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏']
        })
        
        export_df.to_csv(csv_path, index=False, encoding='utf-8-sig')
        st.success(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {csv_path}")

if "data" in st.session_state and st.session_state.data["batch_sizes"]:
    batch_sizes = st.session_state.data["batch_sizes"]
    defect_counts = st.session_state.data["defect_counts"]
    total_batches = len(batch_sizes)
    total_parts = sum(batch_sizes)
    total_defects = sum(defect_counts)
    avg_defect_rate = total_defects / total_parts if total_parts > 0 else 0

    st.header("üìã –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–π")
    df = pd.DataFrame({
        "–ü–∞—Ä—Ç–∏—è": range(1, total_batches + 1),
        "–î–µ—Ç–∞–ª–µ–π": batch_sizes,
        "–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö": defect_counts,
        "% –±—Ä–∞–∫–∞": [d / s * 100 for d, s in zip(defect_counts, batch_sizes)]
    })
    st.dataframe(df.style.format({"% –±—Ä–∞–∫–∞": "{:.2f}"}), use_container_width=True)

    st.header("üìå –°–≤–æ–¥–∫–∞")
    col1, col2, col3 = st.columns(3)
    col1.metric("–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π", total_batches)
    col2.metric("–í—Å–µ–≥–æ –¥–µ—Ç–∞–ª–µ–π", f"{total_parts:,}")
    col3.metric("–°—Ä–µ–¥–Ω–∏–π % –±—Ä–∞–∫–∞", f"{avg_defect_rate * 100:.2f}%")

    st.header("üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    fig1, ax1 = plt.subplots(figsize=(10, 5))
    expected_defects = [s * avg_defect_rate for s in batch_sizes]
    ax1.bar(range(1, total_batches + 1), defect_counts, 
           color=["#ef4444" if d > e else "#10b981" for d, e in zip(defect_counts, expected_defects)],
           alpha=0.8, label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–∞–∫")
    ax1.plot(range(1, total_batches + 1), expected_defects, "o--", color="#4f46e5", label="–û–∂–∏–¥–∞–µ–º—ã–π (–±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ)")
    ax1.set_xlabel("–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏")
    ax1.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π")
    ax1.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–∞–∫–∞")
    ax1.legend()
    ax1.grid(True, linestyle='--', alpha=0.5)
    st.pyplot(fig1)

    fig2, ax2 = plt.subplots(figsize=(10, 5))
    defect_rates = np.array(defect_counts) / np.array(batch_sizes)
    ax2.hist(defect_rates, bins=15, density=True, alpha=0.6, color='#3b82f6', label='–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    
    mu = avg_defect_rate
    sigma = np.sqrt(mu*(1-mu)/np.mean(batch_sizes))
    x = np.linspace(max(0, mu-3*sigma), min(1, mu+3*sigma), 100)
    ax2.plot(x, norm.pdf(x, mu, sigma), 'r-', lw=2, label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ')
    
    ax2.set_xlabel('–î–æ–ª—è –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π')
    ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏')
    ax2.legend()
    ax2.grid(True)
    st.pyplot(fig2)

    st.header("üìê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç")
    st.markdown("**–ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞:** –ë—Ä–∞–∫ –≤ –ø–∞—Ä—Ç–∏—è—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.")
    
    if st.button("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≥–∏–ø–æ—Ç–µ–∑—ã"):
        observed = np.array(defect_counts)
        expected = np.array(batch_sizes) * avg_defect_rate
        
        if np.any(expected < 5):
            st.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã < 5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–º–∏!")
        
        chi2_stat = ((observed - expected)**2 / expected).sum()
        df = len(observed) - 2
        p_value = 1 - chi2.cdf(chi2_stat, df)
        
        col1, col2, col3 = st.columns(3)
        col1.metric("œá¬≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{chi2_stat:.3f}")
        col2.metric("–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã", df)
        col3.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{p_value:.4f}")
        
        st.markdown("**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**")
        if p_value < 0.05:
            st.error("–ì–∏–ø–æ—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è (p < 0.05) - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É.")
        else:
            st.success("–ì–∏–ø–æ—Ç–µ–∑–∞ –Ω–µ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É.")
        
        with st.expander("‚ÑπÔ∏è –û –º–µ—Ç–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞"):
            st.markdown("""
            **–ú–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:**
            1. –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –≤ –ø–∞—Ä—Ç–∏—è—Ö –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
            2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ–≥–ª–∞—Å–∏—è —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –ü–∏—Ä—Å–æ–Ω–∞
            3. –û–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫: `n[i] * p`, –≥–¥–µ `p` - –æ–±—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞
            4. –°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã: `k - 2`, –≥–¥–µ `k` - —á–∏—Å–ª–æ –ø–∞—Ä—Ç–∏–π (–º—ã –æ—Ü–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä `p` –∏–∑ –¥–∞–Ω–Ω—ã—Ö)
            
            **–£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏:**
            - –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ‚â• 5
            - –†–∞–∑–º–µ—Ä—ã –ø–∞—Ä—Ç–∏–π –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è
            """)
else:
    if input_method == "–í—Ä—É—á–Ω—É—é":
        st.info("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'")
    else:
        st.info("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å")