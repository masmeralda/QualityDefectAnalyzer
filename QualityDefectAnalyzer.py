import streamlit as st
import numpy as np
import pandas as pd
from scipy.stats import chisquare
import matplotlib.pyplot as plt

# –í–í–û–î –î–ê–ù–ù–´–•

with st.sidebar:
    st.header("‚öôÔ∏è –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    input_method = st.radio("–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["–í—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"])

    if input_method == "–í—Ä—É—á–Ω—É—é":
        batch_size = st.number_input("–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏", min_value=1, value=100)
        defect_count = st.number_input("–ö–æ–ª-–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö", min_value=0, value=5)

        if "data" not in st.session_state:
            st.session_state.data = {"batch_sizes": [], "defect_counts": []}

        col1, col2 = st.columns(2)
        if col1.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é"):
            st.session_state.data["batch_sizes"].append(batch_size)
            st.session_state.data["defect_counts"].append(defect_count)
            st.success("–ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        if col2.button("üóë –û—á–∏—Å—Ç–∏—Ç—å"):
            st.session_state.data = {"batch_sizes": [], "defect_counts": []}
            st.warning("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")

    else:
        uploaded_file = st.file_uploader("CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'batch_size' –∏ 'defect_count'")
        if uploaded_file:
            try:
                df = pd.read_csv(uploaded_file)
                if "batch_size" in df and "defect_count" in df:
                    st.session_state.data = {
                        "batch_sizes": df["batch_size"].tolist(),
                        "defect_counts": df["defect_count"].tolist()
                    }
                    st.success("CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                else:
                    st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'batch_size' –∏ 'defect_count'")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")

# –ê–ù–ê–õ–ò–ó –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø

if "data" in st.session_state and st.session_state.data["batch_sizes"]:
    batch_sizes = st.session_state.data["batch_sizes"]
    defect_counts = st.session_state.data["defect_counts"]
    total_batches = len(batch_sizes)
    total_parts = sum(batch_sizes)
    total_defects = sum(defect_counts)
    avg_defect_rate = total_defects / total_parts if total_parts > 0 else 0
    expected_defects = [s * avg_defect_rate for s in batch_sizes]

    st.header("üìã –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–π")
    df = pd.DataFrame({
        "–ü–∞—Ä—Ç–∏—è": range(1, total_batches + 1),
        "–î–µ—Ç–∞–ª–µ–π": batch_sizes,
        "–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö": defect_counts,
        "% –±—Ä–∞–∫–∞": [d / s * 100 for d, s in zip(defect_counts, batch_sizes)]
    })
    st.dataframe(df.style.format({"% –±—Ä–∞–∫–∞": "{:.2f}"}), use_container_width=True)

    st.header("üìå –°–≤–æ–¥–∫–∞")
    col1, col2, col3 = st.columns(3)
    col1.metric("–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π", total_batches)
    col2.metric("–í—Å–µ–≥–æ –¥–µ—Ç–∞–ª–µ–π", f"{total_parts:,}")
    col3.metric("–°—Ä–µ–¥–Ω–∏–π % –±—Ä–∞–∫–∞", f"{avg_defect_rate * 100:.2f}%")

    st.header("üìà –ì—Ä–∞—Ñ–∏–∫")
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.bar(range(1, total_batches + 1), defect_counts, 
           color=["#ef4444" if d > e else "#10b981" for d, e in zip(defect_counts, expected_defects)],
           alpha=0.8, label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–∞–∫")
    ax.plot(range(1, total_batches + 1), expected_defects, "o--", color="#4f46e5", label="–û–∂–∏–¥–∞–µ–º—ã–π")
    ax.set_xlabel("–ü–∞—Ä—Ç–∏—è")
    ax.set_ylabel("–ö–æ–ª-–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö")
    ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –±—Ä–∞–∫–∞")
    ax.legend()
    ax.grid(True, linestyle='--', alpha=0.5)
    st.pyplot(fig)

    st.header("üìê –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É"):
        chi2, p_value = chisquare(f_obs=defect_counts, f_exp=expected_defects)
        col1, col2 = st.columns(2)
        col1.metric("œá¬≤ –∑–Ω–∞—á–µ–Ω–∏–µ", f"{chi2:.3f}")
        col2.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{p_value:.4f}")

        st.markdown("**–í—ã–≤–æ–¥:**")
        if p_value < 0.05:
            st.error("–ì–∏–ø–æ—Ç–µ–∑–∞ –æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –û–¢–í–ï–†–ì–ê–ï–¢–°–Ø (–∑–Ω–∞—á–∏–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞)")
        else:
            st.success("–ù–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏–π –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º.")
